import 'package:flutter/material.dart';
import 'package:hive/hive.dart';

part 'goal_model.g.dart';

/// –ú–æ–¥–µ–ª—å —Ü–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã "6 –õ–µ—Å—Ç–Ω–∏—Ü –¶–µ–ª–µ–π"
@HiveType(typeId: 10)
class Goal extends HiveObject {
  /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ü–µ–ª–∏
  @HiveField(0)
  final String id;
  
  /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
  @HiveField(1)
  final String name;
  
  /// –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  @HiveField(2)
  final String emoji;
  
  /// –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  @HiveField(3)
  double currentValue;
  
  /// –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  @HiveField(4)
  final double targetValue;
  
  /// –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–∫–≥, $, —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ç.–¥.)
  @HiveField(5)
  final String unit;
  
  /// –î–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–∏
  @HiveField(6)
  int daysPassed;
  
  /// –¢–∏–ø —Ü–µ–ª–∏ (decrease - —É–º–µ–Ω—å—à–µ–Ω–∏–µ, increase - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ)
  @HiveField(7)
  final GoalType type;
  
  /// –¶–≤–µ—Ç —Ç–µ–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (hex —Å—Ç—Ä–æ–∫–∞)
  @HiveField(8)
  final String colorHex;
  
  /// –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
  @HiveField(9)
  final DateTime createdAt;
  
  /// –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  @HiveField(10)
  DateTime lastUpdated;
  
  /// –ò—Å—Ç–æ—Ä–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  @HiveField(11)
  List<DailyGoalValue> dailyHistory;

  Goal({
    required this.id,
    required this.name,
    required this.emoji,
    required this.currentValue,
    required this.targetValue,
    required this.unit,
    this.daysPassed = 0,
    required this.type,
    required this.colorHex,
    DateTime? createdAt,
    DateTime? lastUpdated,
    List<DailyGoalValue>? dailyHistory,
  }) : createdAt = createdAt ?? DateTime.now(),
       lastUpdated = lastUpdated ?? DateTime.now(),
       dailyHistory = dailyHistory ?? [];

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.0 - 1.0)
  double get progressPercent {
    if (targetValue == 0) return 0.0;
    
    switch (type) {
      case GoalType.increase:
        return (currentValue / targetValue).clamp(0.0, 1.0);
      case GoalType.decrease:
        // –î–ª—è —Ü–µ–ª–µ–π —É–º–µ–Ω—å—à–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–µ—Å—Å = (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ - —Ç–µ–∫—É—â–µ–µ) / (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ - —Ü–µ–ª—å)
        final startValue = targetValue + currentValue; // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return ((startValue - currentValue) / (startValue - targetValue)).clamp(0.0, 1.0);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤–∏–¥–µ —Å—Ç—É–ø–µ–Ω–µ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º)
  int get stepsCompleted {
    return (progressPercent * daysPassed).round().clamp(0, daysPassed);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è —Ä–∞–∑–Ω–∏—Ü—É –¥–æ —Ü–µ–ª–∏
  double get remainingValue {
    switch (type) {
      case GoalType.increase:
        return (targetValue - currentValue).clamp(0.0, double.infinity);
      case GoalType.decrease:
        return (currentValue - targetValue).clamp(0.0, double.infinity);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  String get formattedCurrentValue {
    return _formatValue(currentValue);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  String get formattedTargetValue {
    return _formatValue(targetValue);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è —Ä–∞–∑–Ω–∏—Ü—É
  String get formattedRemainingValue {
    return _formatValue(remainingValue);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∫–∞–∫ Color –æ–±—ä–µ–∫—Ç
  Color get color {
    try {
      final hexCode = colorHex.replaceAll('#', '');
      return Color(int.parse('FF$hexCode', radix: 16));
    } catch (e) {
      return const Color(0xFFE9E1D1); // Fallback –∫ –ø–µ—Å–æ—á–Ω–æ–º—É —Ü–≤–µ—Ç—É
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è
  String _formatValue(double value) {
    String formattedNumber;
    
    if (value >= 1000000) {
      formattedNumber = '${(value / 1000000).toStringAsFixed(1)}M';
    } else if (value >= 1000) {
      formattedNumber = '${(value / 1000).toStringAsFixed(1)}K';
    } else if (value % 1 == 0) {
      formattedNumber = value.toInt().toString();
    } else {
      formattedNumber = value.toStringAsFixed(1);
    }
    
    return '$formattedNumber$unit';
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  void updateCurrentValue(double newValue) {
    currentValue = newValue;
    lastUpdated = DateTime.now();
    save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Hive
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –¥–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  void addDayProgress() {
    daysPassed++;
    lastUpdated = DateTime.now();
    save();
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  void addDailyValue(double value, {String? note}) {
    final today = DateTime.now();
    final dailyValue = DailyGoalValue(
      date: DateTime(today.year, today.month, today.day),
      value: value,
      note: note,
    );
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    dailyHistory.removeWhere((item) => 
      item.date.year == today.year && 
      item.date.month == today.month && 
      item.date.day == today.day
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    dailyHistory.add(dailyValue);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    dailyHistory.sort((a, b) => a.date.compareTo(b.date));
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (dailyHistory.length > 30) {
      dailyHistory = dailyHistory.sublist(dailyHistory.length - 30);
    }
    
    lastUpdated = DateTime.now();
    save();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
  List<DailyGoalValue> getGraphData({int days = 7}) {
    if (dailyHistory.isEmpty) return [];
    
    final now = DateTime.now();
    final startDate = now.subtract(Duration(days: days - 1));
    
    return dailyHistory.where((item) => 
      item.date.isAfter(startDate.subtract(const Duration(days: 1)))
    ).toList();
  }

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  Goal copyWith({
    String? name,
    String? emoji,
    double? currentValue,
    double? targetValue,
    String? unit,
    int? daysPassed,
    GoalType? type,
    String? colorHex,
  }) {
    return Goal(
      id: id,
      name: name ?? this.name,
      emoji: emoji ?? this.emoji,
      currentValue: currentValue ?? this.currentValue,
      targetValue: targetValue ?? this.targetValue,
      unit: unit ?? this.unit,
      daysPassed: daysPassed ?? this.daysPassed,
      type: type ?? this.type,
      colorHex: colorHex ?? this.colorHex,
      createdAt: createdAt,
      lastUpdated: DateTime.now(),
    );
  }
}

/// –¢–∏–ø —Ü–µ–ª–∏
@HiveType(typeId: 11)
enum GoalType {
  @HiveField(0)
  increase, // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å –∏ —Ç.–¥.)
  
  @HiveField(1)
  decrease, // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å, —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏ —Ç.–¥.)
}

/// –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
class GoPRIMEctory {
  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–ù–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏"
  static Goal createMoneyGoal({
    double targetAmount = 50000,
    double currentAmount = 0,
  }) {
    return Goal(
      id: 'money_goal',
      name: '–î–ï–ù–¨–ì–ò',
      emoji: 'üí∞',
      currentValue: currentAmount,
      targetValue: targetAmount,
      unit: '\$',
      type: GoalType.increase,
      colorHex: '#FFD700', // –ó–æ–ª–æ—Ç–æ–π
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–ü–æ—Ö—É–¥–µ—Ç—å"
  static Goal createWeightLossGoal({
    double targetWeight = 100,
    double currentWeight = 127,
  }) {
    return Goal(
      id: 'weight_goal',
      name: '–¢–ï–õ–û',
      emoji: 'üèÉ',
      currentValue: currentWeight,
      targetValue: targetWeight,
      unit: '–∫–≥',
      type: GoalType.decrease,
      colorHex: '#FF6B6B', // –ö—Ä–∞—Å–Ω—ã–π
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–†–∞–∑–≤–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏"
  static Goal createWillpowerGoal({
    double targetDays = 365,
    double currentDays = 0,
  }) {
    return Goal(
      id: 'will_goal',
      name: '–í–û–õ–Ø',
      emoji: 'üí™',
      currentValue: currentDays,
      targetValue: targetDays,
      unit: ' –¥–Ω–µ–π',
      type: GoalType.increase,
      colorHex: '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–£–ª—É—á—à–∏—Ç—å —Ñ–æ–∫—É—Å"
  static Goal createFocusGoal({
    double targetHours = 1000,
    double currentHours = 0,
  }) {
    return Goal(
      id: 'focus_goal',
      name: '–§–û–ö–£–°',
      emoji: 'üéØ',
      currentValue: currentHours,
      targetValue: targetHours,
      unit: '—á',
      type: GoalType.increase,
      colorHex: '#45B7D1', // –°–∏–Ω–∏–π
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–†–∞–∑–≤–∏—Ç—å —Ä–∞–∑—É–º"
  static Goal createMindGoal({
    double targetBooks = 52,
    double currentBooks = 0,
  }) {
    return Goal(
      id: 'mind_goal',
      name: '–†–ê–ó–£–ú',
      emoji: 'üß†',
      currentValue: currentBooks,
      targetValue: targetBooks,
      unit: ' –∫–Ω–∏–≥',
      type: GoalType.increase,
      colorHex: '#9B59B6', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å "–û–±—Ä–µ—Å—Ç–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
  static Goal createPeaceGoal({
    double targetSessions = 365,
    double currentSessions = 0,
  }) {
    return Goal(
      id: 'peace_goal',
      name: '–°–ü–û–ö–û–ô–°–¢–í–ò–ï',
      emoji: 'üßò',
      currentValue: currentSessions,
      targetValue: targetSessions,
      unit: ' —Å–µ—Å—Å–∏–π',
      type: GoalType.increase,
      colorHex: '#2ECC71', // –ó–µ–ª–µ–Ω—ã–π
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
  static List<Goal> getDefaultGoals() {
    return [
      createMoneyGoal(),
      createWeightLossGoal(),
      createWillpowerGoal(),
      createFocusGoal(),
      createMindGoal(),
      createPeaceGoal(),
    ];
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–π —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  static List<Goal> getDefaultGoalsWithDemoData() {
    final goals = [
      createMoneyGoal(currentAmount: 12500),
      createWeightLossGoal(currentWeight: 122),
      createWillpowerGoal(currentDays: 67),
      createFocusGoal(currentHours: 156),
      createMindGoal(currentBooks: 12),
      createPeaceGoal(currentSessions: 89),
    ];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    goals[0].daysPassed = 89;
    goals[1].daysPassed = 45;
    goals[2].daysPassed = 67;
    goals[3].daysPassed = 78;
    goals[4].daysPassed = 120;
    goals[5].daysPassed = 95;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏
    for (final goal in goals) {
      _addDemoHistoryData(goal);
    }
    
    return goals;
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ü–µ–ª–∏
  static void _addDemoHistoryData(Goal goal) {
    final now = DateTime.now();
    final history = <DailyGoalValue>[];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for (int i = 6; i >= 0; i--) {
      final date = now.subtract(Duration(days: i));
      double value;
      
      switch (goal.type) {
        case GoalType.increase:
          // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
          value = goal.currentValue * (1.0 - (i * 0.05));
          break;
        case GoalType.decrease:
          // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
          value = goal.currentValue * (1.0 + (i * 0.02));
          break;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      value += (i % 2 == 0 ? 1 : -1) * (value * 0.01);
      
      history.add(DailyGoalValue(
        date: DateTime(date.year, date.month, date.day),
        value: value,
        note: i == 0 ? '–°–µ–≥–æ–¥–Ω—è' : null,
      ));
    }
    
    goal.dailyHistory.addAll(history);
  }
}

/// –ú–æ–¥–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@HiveType(typeId: 12)
class DailyGoalValue extends HiveObject {
  /// –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
  @HiveField(0)
  final DateTime date;
  
  /// –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
  @HiveField(1)
  final double value;
  
  /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  @HiveField(2)
  final String? note;

  DailyGoalValue({
    required this.date,
    required this.value,
    this.note,
  });

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  DailyGoalValue copyWith({
    DateTime? date,
    double? value,
    String? note,
  }) {
    return DailyGoalValue(
      date: date ?? this.date,
      value: value ?? this.value,
      note: note ?? this.note,
    );
  }

  @override
  String toString() {
    return 'DailyGoalValue(date: $date, value: $value, note: $note)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DailyGoalValue &&
        other.date == date &&
        other.value == value &&
        other.note == note;
  }

  @override
  int get hashCode => date.hashCode ^ value.hashCode ^ note.hashCode;
}
