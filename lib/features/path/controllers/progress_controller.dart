import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:vibration/vibration.dart';
import '../../../app/services/supabase_service.dart';
import '../models/user_progress_model.dart';

/// Provider –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
final progressControllerProvider =
    StateNotifierProvider<ProgressController, UserProgress>((ref) {
      return ProgressController();
    });

/// Provider –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userHabitsProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final supabaseService = SupabaseService();
  return supabaseService.loadUserHabits();
});

/// Provider –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
final userHabitsWithProgressProvider = FutureProvider<List<Map<String, dynamic>>>((ref) async {
  final supabaseService = SupabaseService();
  final habitsData = await supabaseService.loadUserHabits();
  // Batched fetch for today's actuals keyed by user_habit_id
  final todayActuals = await supabaseService.getTodayHabitActuals();

  final habitsWithProgress = <Map<String, dynamic>>[];
  for (final userHabit in habitsData) {
    final habit = userHabit['habits'] ?? {};
    final String? userHabitId = (userHabit['id'] as String?);
    final String? habitCatalogId = (userHabit['habit_id'] as String?);
    final int target = (userHabit['target_value'] ?? 1) as int;

    if (userHabitId == null) continue;

    final actual = todayActuals[userHabitId] ?? 0;
    final completed = actual >= target;

    habitsWithProgress.add({
      'name': habit['name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞',
      'progress': '$actual / $target',
      'done': completed,
      'user_habit_id': userHabitId,
      'habit_id': habitCatalogId,
      'category': habit['category'],
      'target_value': target,
      'actual_value': actual,
    });
  }

  return habitsWithProgress;
});

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProgressController extends StateNotifier<UserProgress> {
  static const String _boxName = 'user_progress';
  Box<UserProgress>? _box;
  final AudioPlayer _audioPlayer = AudioPlayer();
  final SupabaseService _supabaseService = SupabaseService();

  ProgressController() : super(UserProgress()) {
    _initializeHive();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  Future<void> _initializeHive() async {
    await Hive.initFlutter();

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(UserProgressAdapter());
    }
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(DayProgressAdapter());
    }
    if (!Hive.isAdapterRegistered(2)) {
      Hive.registerAdapter(AchievementAdapter());
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–æ–∫—Å
    _box = await Hive.openBox<UserProgress>(_boxName);

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
    final supabaseProgress = await _supabaseService.loadUserProgress();
    if (supabaseProgress != null) {
      // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –¥–µ–º–æ-–∑–∞–ø–∏—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω—É–ª–∏
      if (_looksLikeDemoProgress(supabaseProgress)) {
        state = UserProgress();
        await _saveProgress();
      } else {
        state = supabaseProgress;
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
        await _saveProgress();
      }
      return;
    }

    // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Hive –∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Ö –≤ Supabase
    final savedProgress = _box?.get('current');
    if (savedProgress != null) {
      // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç —Å—Ç–∞—Ä–∞—è –¥–µ–º–æ-–∑–∞–ø–∏—Å—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë
      if (_looksLikeDemoProgress(savedProgress)) {
        state = UserProgress();
      } else {
        state = savedProgress;
      }
      await _saveProgress();
    } else {
      // –ë–µ–∑ –¥–µ–º–æ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª—è–º–∏ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –Ω–∞ –±—ç–∫–µ
      state = UserProgress();
      await _saveProgress();
    }
  }

  // –£–±—Ä–∞–ª–∏ –¥–µ–º–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª–µ–π –∏ —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å Supabase

  /// –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 3 –∏ 40%
  bool _looksLikeDemoProgress(UserProgress p) {
    final sphere = p.sphereProgress;
    final demoSphere = {
      'body': 0.8,
      'will': 0.6,
      'focus': 0.4,
      'mind': 0.3,
      'peace': 0.2,
      'money': 0.1,
    };
    final spheresMatch = sphere.length == demoSphere.length &&
        demoSphere.entries.every((e) => (sphere[e.key] ?? -1) == e.value);

    return p.currentStreak == 3 &&
        p.totalSteps == 47 &&
        p.totalXP == 2847 &&
        p.currentZone == '–í–û–õ–Ø' &&
        spheresMatch;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑—É
  Future<void> _saveProgress() async {
    await _box?.put('current', state);
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
    await _supabaseService.saveUserProgress(state);
  }

  /// –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É
  Future<void> completeHabit(
    String habitName,
    String habitType, {
    int xpGain = 50,
  }) async {
    final newState = UserProgress(
      totalSteps: state.totalSteps + 1,
      currentStreak: state.currentStreak,
      longestStreak: state.longestStreak,
      totalStats: Map.from(state.totalStats),
      progressHistory: List.from(state.progressHistory),
      currentZone: state.currentZone,
      totalXP: state.totalXP + xpGain,
      lastActiveDate: state.lastActiveDate,
      sphereProgress: Map.from(state.sphereProgress),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏
    newState.addStep(habitType, xpGain);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    _updateTodayProgress(newState, habitName, xpGain);

    state = newState;
    await _saveProgress();

    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—é
    await _playSuccessEffects();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    _checkAchievements();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  void _updateTodayProgress(
    UserProgress progress,
    String habitName,
    int xpGain,
  ) {
    final today = DateTime.now();
    final todayIndex = progress.progressHistory.indexWhere(
      (day) =>
          day.date.year == today.year &&
          day.date.month == today.month &&
          day.date.day == today.day,
    );

    if (todayIndex != -1) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
      final todayProgress = progress.progressHistory[todayIndex];
      if (!todayProgress.completedHabits.contains(habitName)) {
        todayProgress.completedHabits.add(habitName);
        todayProgress.stepsCompleted++;
        todayProgress.xpEarned += xpGain;
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
      progress.progressHistory.add(
        DayProgress(
          date: today,
          stepsCompleted: 1,
          completedHabits: [habitName],
          xpEarned: xpGain,
          dailyStats: {},
        ),
      );
    }
  }

  /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É—Å–ø–µ—Ö–∞
  Future<void> _playSuccessEffects() async {
    try {
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      if (await Vibration.hasVibrator()) {
        await Vibration.vibrate(duration: 100, amplitude: 128);
      }

      // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ assets/sounds/)
      // await _audioPlayer.play(AssetSource('sounds/step_complete.mp3'));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞/–≤–∏–±—Ä–∞—Ü–∏–∏
      print('Sound/Vibration error: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  void _checkAchievements() {
    final achievements = <Achievement>[];

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å—Ç—Ä–∏–∫–∏
    if (state.currentStreak == 7) {
      achievements.add(
        Achievement(
          id: 'first_week',
          title: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã',
          description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤!',
          iconName: 'üî•',
          unlockedAt: DateTime.now(),
          xpReward: 200,
        ),
      );
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–ø–µ–Ω–µ–∫
    if (state.totalSteps == 50) {
      achievements.add(
        Achievement(
          id: 'fifty_steps',
          title: '–ü–æ–ª—Å–æ—Ç–Ω–∏',
          description: '50 —Å—Ç—É–ø–µ–Ω–µ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ!',
          iconName: '‚≠ê',
          unlockedAt: DateTime.now(),
          xpReward: 150,
        ),
      );
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–º–µ–Ω—É –∑–æ–Ω—ã
    if (state.currentZone != _getPreviousZone()) {
      achievements.add(
        Achievement(
          id: 'zone_${state.currentZone.toLowerCase()}',
          title: '–ù–æ–≤–∞—è –∑–æ–Ω–∞: ${state.currentZone}',
          description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–æ–Ω—É ${state.currentZone}!',
          iconName: 'üèÜ',
          unlockedAt: DateTime.now(),
          xpReward: 300,
        ),
      );
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    for (final achievement in achievements) {
      _showAchievementNotification(achievement);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–æ–Ω—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  String _getPreviousZone() {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    return '–¢–ï–õ–û'; // –ó–∞–≥–ª—É—à–∫–∞
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  void _showAchievementNotification(Achievement achievement) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    print('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.title}');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
  Map<String, dynamic> getAllTimeStats() {
    return {
      'total_steps': state.totalSteps,
      'total_xp': state.totalXP,
      'current_streak': state.currentStreak,
      'longest_streak': state.longestStreak,
      'current_rank': state.currentRank,
      'overall_progress': (state.getOverallProgress() * 100).toInt(),
      'zone_info': state.getCurrentZoneInfo(),
      'detailed_stats': state.totalStats,
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
  List<DayProgress> getRecentProgress({int days = 7}) {
    final recent = state.progressHistory
        .where((day) => DateTime.now().difference(day.date).inDays <= days)
        .toList();
    recent.sort((a, b) => b.date.compareTo(a.date));
    return recent;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ñ–µ—Ä–∞–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  Map<String, double> getSphereProgress() {
    return Map.from(state.sphereProgress);
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> resetProgress() async {
    state = UserProgress();
    await _saveProgress();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ê–ª—å—Ñ–∞-–ª–µ—Å—Ç–Ω–∏—Ü—ã
  Map<String, dynamic> getStairData() {
    final spheres = ['–¢–ï–õ–û', '–í–û–õ–Ø', '–§–û–ö–£–°', '–†–ê–ó–£–ú', '–°–ü–û–ö–û–ô–°–¢–í–ò–ï', '–î–ï–ù–¨–ì–ò'];
    final currentStepInZone = (state.totalSteps % 100);
    final completedZones = (state.totalSteps ~/ 100);

    return {
      'character_position': state.totalSteps,
      'current_zone': state.currentZone,
      'current_step_in_zone': currentStepInZone,
      'completed_zones': completedZones,
      'next_zone': completedZones < 5 ? spheres[completedZones + 1] : '–ê–õ–¨–§–ê',
      'progress_to_next_zone': currentStepInZone / 100.0,
      'overall_progress': state.getOverallProgress(),
      'character_rank': state.currentRank,
    };
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å Supabase
  Future<void> syncWithSupabase() async {
    try {
      await _supabaseService.saveUserProgress(state);
    } catch (e) {
      print('Error syncing with Supabase: $e');
    }
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ Supabase –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  Future<void> loadProgressFromSupabase() async {
    try {
      final supabaseProgress = await _supabaseService.loadUserProgress();
      if (supabaseProgress != null) {
        state = supabaseProgress;
        await _saveProgress();
      }
    } catch (e) {
      print('Error loading progress from Supabase: $e');
    }
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }
}

/// Provider –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
final allTimeStatsProvider = Provider<Map<String, dynamic>>((ref) {
  // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–ø—Ä—è–º—É—é; —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ
  final controller = ref.read(progressControllerProvider.notifier);
  return controller.getAllTimeStats();
});

/// Provider –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ª–µ—Å—Ç–Ω–∏—Ü—ã
final stairDataProvider = Provider<Map<String, dynamic>>((ref) {
  final controller = ref.read(progressControllerProvider.notifier);
  return controller.getStairData();
});

/// Provider –¥–ª—è –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
final recentProgressProvider = Provider<List<DayProgress>>((ref) {
  final controller = ref.read(progressControllerProvider.notifier);
  return controller.getRecentProgress();
});

/// Provider –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
final weeklyStatsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final supabaseService = SupabaseService();
  return supabaseService.getWeeklyOverview();
});
