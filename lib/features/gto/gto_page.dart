import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../app/theme.dart';
import 'controllers/workout_controller.dart';

class GTOPage extends ConsumerStatefulWidget {
  const GTOPage({super.key});

  @override
  ConsumerState<GTOPage> createState() => _GTOPageState();
}

class _GTOPageState extends ConsumerState<GTOPage> {
  int selectedAgeGroup = 0;
  String selectedGender = 'male';
  
  final List<Map<String, dynamic>> ageGroups = [
    {'name': '18-24 –≥–æ–¥–∞', 'id': '18-24'},
    {'name': '25-29 –ª–µ—Ç', 'id': '25-29'},
    {'name': '30-34 –≥–æ–¥–∞', 'id': '30-34'},
    {'name': '35-39 –ª–µ—Ç', 'id': '35-39'},
    {'name': '40-44 –≥–æ–¥–∞', 'id': '40-44'},
    {'name': '45-49 –ª–µ—Ç', 'id': '45-49'},
    {'name': '50-59 –ª–µ—Ç', 'id': '50-59'},
  ];

  // –ù–æ—Ä–º–∞—Ç–∏–≤—ã –ì–¢–û (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
  Map<String, Map<String, Map<String, String>>> gtoNorms = {
    '18-24': {
      'male': {
        'run_100m': '13.5 —Å–µ–∫',
        'run_3000m': '12:30 –º–∏–Ω',
        'pullups': '13 —Ä–∞–∑',
        'pushups': '44 —Ä–∞–∑–∞',
        'abs': '47 —Ä–∞–∑',
        'jump': '2.30 –º',
        'flexibility': '+13 —Å–º',
      },
      'female': {
        'run_100m': '16.5 —Å–µ–∫',
        'run_2000m': '10:50 –º–∏–Ω',
        'pullups': '11 —Ä–∞–∑',
        'pushups': '16 —Ä–∞–∑',
        'abs': '40 —Ä–∞–∑',
        'jump': '1.90 –º',
        'flexibility': '+16 —Å–º',
      },
    },
    '25-29': {
      'male': {
        'run_100m': '13.8 —Å–µ–∫',
        'run_3000m': '13:00 –º–∏–Ω',
        'pullups': '12 —Ä–∞–∑',
        'pushups': '42 —Ä–∞–∑–∞',
        'abs': '45 —Ä–∞–∑',
        'jump': '2.25 –º',
        'flexibility': '+12 —Å–º',
      },
      'female': {
        'run_100m': '17.0 —Å–µ–∫',
        'run_2000m': '11:15 –º–∏–Ω',
        'pullups': '10 —Ä–∞–∑',
        'pushups': '14 —Ä–∞–∑',
        'abs': '38 —Ä–∞–∑',
        'jump': '1.85 –º',
        'flexibility': '+15 —Å–º',
      },
    },
  };

  List<Map<String, String>> get currentNorms {
    final ageGroupId = ageGroups[selectedAgeGroup]['id'];
    final norms = gtoNorms[ageGroupId]?[selectedGender] ?? {};
    
    return [
      {'name': '–ë–µ–≥ 100–º', 'norm': norms['run_100m'] ?? '–ù/–î', 'icon': 'üèÉ‚Äç‚ôÇÔ∏è'},
      {'name': selectedGender == 'male' ? '–ë–µ–≥ 3000–º' : '–ë–µ–≥ 2000–º', 'norm': norms[selectedGender == 'male' ? 'run_3000m' : 'run_2000m'] ?? '–ù/–î', 'icon': 'üèÉ‚Äç‚ôÄÔ∏è'},
      {'name': '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', 'norm': norms['pullups'] ?? '–ù/–î', 'icon': 'üí™'},
      {'name': '–û—Ç–∂–∏–º–∞–Ω–∏—è', 'norm': norms['pushups'] ?? '–ù/–î', 'icon': 'ü§≤'},
      {'name': '–ü—Ä–µ—Å—Å', 'norm': norms['abs'] ?? '–ù/–î', 'icon': 'üèãÔ∏è‚Äç‚ôÇÔ∏è'},
      {'name': '–ü—Ä—ã–∂–æ–∫ –≤ –¥–ª–∏–Ω—É', 'norm': norms['jump'] ?? '–ù/–î', 'icon': 'ü¶ò'},
      {'name': '–ì–∏–±–∫–æ—Å—Ç—å', 'norm': norms['flexibility'] ?? '–ù/–î', 'icon': 'ü§∏‚Äç‚ôÄÔ∏è'},
    ];
  }

  Future<void> _startGTOWorkout() async {
    try {
      // –°–æ–∑–¥–∞–µ–º –ì–¢–û —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–æ—Ç–∂–∏–º–∞–Ω–∏—è 10 —Ä–∞–∑)
      await ref.read(workoutControllerProvider.notifier).createGTOWorkout();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É AI-Motion
      if (mounted) {
        context.push('/gto/workout');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: $e'),
            backgroundColor: PRIMETheme.warn,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      appBar: AppBar(
        backgroundColor: Theme.of(context).scaffoldBackgroundColor,
        title: const Text(
          '–ì–¢–û',
          style: TextStyle(
            color: PRIMETheme.sand,
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: const IconThemeData(color: PRIMETheme.sand),
        elevation: 0,
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –û–ø–∏—Å–∞–Ω–∏–µ –ì–¢–û
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Theme.of(context).cardColor,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: PRIMETheme.line),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '–ì–æ—Ç–æ–≤ –∫ –¢—Ä—É–¥—É –∏ –û–±–æ—Ä–æ–Ω–µ',
                      style: TextStyle(
                        color: PRIMETheme.sand,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '–ì–¢–û - —ç—Ç–æ –≤—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–æ-—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞.',
                      style: TextStyle(
                        color: PRIMETheme.sandWeak,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),

              // –í—ã–±–æ—Ä –ø–æ–ª–∞
              const Text(
                '–ü–æ–ª:',
                style: TextStyle(
                  color: PRIMETheme.sand,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => selectedGender = 'male'),
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        decoration: BoxDecoration(
                          color: selectedGender == 'male' ? PRIMETheme.primary : Theme.of(context).cardColor,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: PRIMETheme.line),
                        ),
                        child: Center(
                          child: Text(
                            'üë® –ú—É–∂—Å–∫–æ–π',
                            style: TextStyle(
                              color: selectedGender == 'male' ? PRIMETheme.sand : PRIMETheme.sandWeak,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: GestureDetector(
                      onTap: () => setState(() => selectedGender = 'female'),
                      child: Container(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        decoration: BoxDecoration(
                          color: selectedGender == 'female' ? PRIMETheme.primary : Theme.of(context).cardColor,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: PRIMETheme.line),
                        ),
                        child: Center(
                          child: Text(
                            'üë© –ñ–µ–Ω—Å–∫–∏–π',
                            style: TextStyle(
                              color: selectedGender == 'female' ? PRIMETheme.sand : PRIMETheme.sandWeak,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),

              // –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
              const Text(
                '–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:',
                style: TextStyle(
                  color: PRIMETheme.sand,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Container(
                height: 50,
                child: ListView.builder(
                  scrollDirection: Axis.horizontal,
                  itemCount: ageGroups.length,
                  itemBuilder: (context, index) {
                    final isSelected = selectedAgeGroup == index;
                    return GestureDetector(
                      onTap: () => setState(() => selectedAgeGroup = index),
                      child: Container(
                        margin: const EdgeInsets.only(right: 8),
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        decoration: BoxDecoration(
                          color: isSelected ? PRIMETheme.primary : Theme.of(context).cardColor,
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: PRIMETheme.line),
                        ),
                        child: Center(
                          child: Text(
                            ageGroups[index]['name'],
                            style: TextStyle(
                              color: isSelected ? PRIMETheme.sand : PRIMETheme.sandWeak,
                              fontWeight: FontWeight.bold,
                              fontSize: 12,
                            ),
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              const SizedBox(height: 20),

              // –ù–æ—Ä–º–∞—Ç–∏–≤—ã
              const Text(
                '–ù–æ—Ä–º–∞—Ç–∏–≤—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ–π –∑–Ω–∞—á–æ–∫:',
                style: TextStyle(
                  color: PRIMETheme.sand,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 12),
              
              Expanded(
                child: ListView.builder(
                  itemCount: currentNorms.length,
                  itemBuilder: (context, index) {
                    final norm = currentNorms[index];
                    return Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Theme.of(context).cardColor,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: PRIMETheme.line),
                      ),
                      child: Row(
                        children: [
                          Text(
                            norm['icon']!,
                            style: const TextStyle(fontSize: 24),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              norm['name']!,
                              style: const TextStyle(
                                color: PRIMETheme.sand,
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          Text(
                            norm['norm']!,
                            style: const TextStyle(
                              color: PRIMETheme.primary,
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
              
              const SizedBox(height: 16),
              
              // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _startGTOWorkout,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: PRIMETheme.primary,
                    foregroundColor: PRIMETheme.sand,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.camera_alt, size: 20),
                      SizedBox(width: 8),
                      Text(
                        'AI-–¢–†–ï–ù–ò–†–û–í–ö–ê: –û–¢–ñ–ò–ú–ê–ù–ò–Ø',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
