import 'package:hive/hive.dart';

part 'quote_model.g.dart';

/// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ç–∞—Ç –¥–ª—è –º—É–∂—Å–∫–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏
enum QuoteCategory {
  money,      // –î–µ–Ω—å–≥–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã
  discipline, // –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
  will,       // –í–æ–ª—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
  focus,      // –§–æ–∫—É—Å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
  strength,   // –°–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
  success,    // –£—Å–ø–µ—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  mindset,    // –ú—ã—à–ª–µ–Ω–∏–µ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è
  leadership, // –õ–∏–¥–µ—Ä—Å—Ç–≤–æ
  work,       // –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞
  health,     // –ó–¥–æ—Ä–æ–≤—å–µ
}

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ü–∏—Ç–∞—Ç
enum TimeContext {
  morning,    // –£—Ç—Ä–æ (7:00-9:00)
  workday,    // –†–∞–±–æ—á–∏–π –¥–µ–Ω—å (10:00-18:00)
  evening,    // –í–µ—á–µ—Ä (19:00-22:00)
  any,        // –õ—é–±–æ–µ –≤—Ä–µ–º—è
}

@HiveType(typeId: 10)
class Quote extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String text;

  @HiveField(2)
  final String author;

  @HiveField(3)
  final QuoteCategory category;

  @HiveField(4)
  final TimeContext timeContext;

  @HiveField(5)
  final int priority; // 1-10, –≥–¥–µ 10 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

  @HiveField(6)
  final List<String> tags;

  @HiveField(7)
  final List<String> targetZones; // –¢–ï–õ–û, –í–û–õ–Ø, –§–û–ö–£–°, etc.

  @HiveField(8)
  final bool isPremium;

  @HiveField(9)
  final DateTime? lastShown;

  Quote({
    required this.id,
    required this.text,
    required this.author,
    required this.category,
    this.timeContext = TimeContext.any,
    this.priority = 5,
    this.tags = const [],
    this.targetZones = const [],
    this.isPremium = false,
    this.lastShown,
  });

  /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  Quote copyWith({
    String? id,
    String? text,
    String? author,
    QuoteCategory? category,
    TimeContext? timeContext,
    int? priority,
    List<String>? tags,
    List<String>? targetZones,
    bool? isPremium,
    DateTime? lastShown,
  }) {
    return Quote(
      id: id ?? this.id,
      text: text ?? this.text,
      author: author ?? this.author,
      category: category ?? this.category,
      timeContext: timeContext ?? this.timeContext,
      priority: priority ?? this.priority,
      tags: tags ?? this.tags,
      targetZones: targetZones ?? this.targetZones,
      isPremium: isPremium ?? this.isPremium,
      lastShown: lastShown ?? this.lastShown,
    );
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ü–∏—Ç–∞—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  bool isAppropriateForTime(DateTime time) {
    final hour = time.hour;
    switch (timeContext) {
      case TimeContext.morning:
        return hour >= 7 && hour <= 9;
      case TimeContext.workday:
        return hour >= 10 && hour <= 18;
      case TimeContext.evening:
        return hour >= 19 && hour <= 22;
      case TimeContext.any:
        return hour >= 7 && hour <= 22;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ü–∏—Ç–∞—Ç–∞ –¥–ª—è –∑–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bool isAppropriateForZone(String userZone) {
    if (targetZones.isEmpty) return true;
    return targetZones.contains(userZone.toUpperCase());
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  String get categoryEmoji {
    switch (category) {
      case QuoteCategory.money:
        return 'üí∞';
      case QuoteCategory.discipline:
        return '‚ö°';
      case QuoteCategory.will:
        return 'üí™';
      case QuoteCategory.focus:
        return 'üéØ';
      case QuoteCategory.strength:
        return 'üî•';
      case QuoteCategory.success:
        return 'üèÜ';
      case QuoteCategory.mindset:
        return 'üß†';
      case QuoteCategory.leadership:
        return 'üëë';
      case QuoteCategory.work:
        return 'üíº';
      case QuoteCategory.health:
        return 'üèÉ';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  String get categoryName {
    switch (category) {
      case QuoteCategory.money:
        return '–î–µ–Ω—å–≥–∏';
      case QuoteCategory.discipline:
        return '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞';
      case QuoteCategory.will:
        return '–í–æ–ª—è';
      case QuoteCategory.focus:
        return '–§–æ–∫—É—Å';
      case QuoteCategory.strength:
        return '–°–∏–ª–∞';
      case QuoteCategory.success:
        return '–£—Å–ø–µ—Ö';
      case QuoteCategory.mindset:
        return '–ú—ã—à–ª–µ–Ω–∏–µ';
      case QuoteCategory.leadership:
        return '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ';
      case QuoteCategory.work:
        return '–†–∞–±–æ—Ç–∞';
      case QuoteCategory.health:
        return '–ó–¥–æ—Ä–æ–≤—å–µ';
    }
  }

  @override
  String toString() {
    return 'Quote{id: $id, text: $text, author: $author, category: $category}';
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Quote && runtimeType == other.runtimeType && id == other.id;

  @override
  int get hashCode => id.hashCode;
}
