import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';

import '../models/notification_settings.dart';
import '../models/quote_model.dart';
import '../services/background_notification_service.dart';
import '../data/quotes_data.dart';

/// Provider –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final notificationServiceProvider = Provider<BackgroundNotificationService>((ref) {
  return BackgroundNotificationService();
});

/// Provider –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final notificationSettingsProvider = StateNotifierProvider<NotificationSettingsController, NotificationSettings>((ref) {
  final service = ref.watch(notificationServiceProvider);
  return NotificationSettingsController(service);
});

/// Provider –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final notificationStatisticsProvider = FutureProvider<Map<String, dynamic>>((ref) async {
  final service = ref.watch(notificationServiceProvider);
  return await service.getNotificationStatistics();
});

/// Provider –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
final availableQuotesProvider = Provider<List<Quote>>((ref) {
  return QuotesDatabase.getAllQuotes();
});

/// Provider –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
final quotesStatisticsProvider = Provider<Map<String, int>>((ref) {
  return QuotesDatabase.getQuotesStatistics();
});

/// Provider –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã (–¥–ª—è –ø—Ä–µ–≤—å—é)
final contextualQuoteProvider = Provider.family<Quote?, DateTime>((ref, time) {
  final settings = ref.watch(notificationSettingsProvider);
  return QuotesDatabase.getContextualQuote(
    time: time,
    enabledCategories: settings.enabledCategories,
  );
});

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationSettingsController extends StateNotifier<NotificationSettings> {
  final BackgroundNotificationService _service;
  
  NotificationSettingsController(this._service) : super(NotificationSettings.defaultSettings()) {
    _loadSettings();
  }

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> _loadSettings() async {
    try {
      await _service.initialize();
      state = _service.getSettings();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> toggleNotifications() async {
    final newSettings = state.copyWith(isEnabled: !state.isEnabled);
    await _updateSettings(newSettings);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> setStartHour(int hour) async {
    if (hour >= 0 && hour <= 23 && hour < state.endHour) {
      final newSettings = state.copyWith(startHour: hour);
      await _updateSettings(newSettings);
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> setEndHour(int hour) async {
    if (hour >= 0 && hour <= 23 && hour > state.startHour) {
      final newSettings = state.copyWith(endHour: hour);
      await _updateSettings(newSettings);
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  Future<void> setInterval(int minutes) async {
    if (minutes >= 15 && minutes <= 240) { // –û—Ç 15 –º–∏–Ω—É—Ç –¥–æ 4 —á–∞—Å–æ–≤
      final newSettings = state.copyWith(intervalMinutes: minutes);
      await _updateSettings(newSettings);
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç
  Future<void> toggleCategory(String category) async {
    final categories = List<String>.from(state.enabledCategories);
    
    if (categories.contains(category)) {
      categories.remove(category);
    } else {
      categories.add(category);
    }
    
    // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if (categories.isNotEmpty) {
      final newSettings = state.copyWith(enabledCategories: categories);
      await _updateSettings(newSettings);
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫
  Future<void> toggleSound() async {
    final newSettings = state.copyWith(soundEnabled: !state.soundEnabled);
    await _updateSettings(newSettings);
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é
  Future<void> toggleVibration() async {
    final newSettings = state.copyWith(vibrationEnabled: !state.vibrationEnabled);
    await _updateSettings(newSettings);
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
  Future<void> toggleWeekends() async {
    final newSettings = state.copyWith(weekendsEnabled: !state.weekendsEnabled);
    await _updateSettings(newSettings);
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  Future<void> toggleDay(int dayOfWeek) async {
    final disabledDays = List<int>.from(state.disabledDays);
    
    if (disabledDays.contains(dayOfWeek)) {
      disabledDays.remove(dayOfWeek);
    } else {
      disabledDays.add(dayOfWeek);
    }
    
    final newSettings = state.copyWith(disabledDays: disabledDays);
    await _updateSettings(newSettings);
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  Future<void> toggleSmartScheduling() async {
    final newSettings = state.copyWith(smartScheduling: !state.smartScheduling);
    await _updateSettings(newSettings);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å
  Future<void> setMaxDailyQuotes(int count) async {
    if (count >= 1 && count <= 50) {
      final newSettings = state.copyWith(maxDailyQuotes: count);
      await _updateSettings(newSettings);
    }
  }

  /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ü–∏—Ç–∞—Ç—ã
  Future<void> togglePremiumQuotes() async {
    final newSettings = state.copyWith(premiumQuotesEnabled: !state.premiumQuotesEnabled);
    await _updateSettings(newSettings);
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
  Future<void> setTimeZone(String timeZone) async {
    final newSettings = state.copyWith(preferredTimeZone: timeZone);
    await _updateSettings(newSettings);
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> showTestNotification() async {
    try {
      await _service.showTestNotification();
      debugPrint('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
    }
  }

  /// –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  Future<void> restartNotifications() async {
    try {
      await _service.stopNotifications();
      await _service.startNotifications();
      debugPrint('üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> clearHistory() async {
    try {
      await _service.clearHistory();
      debugPrint('üßπ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: $e');
    }
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  Future<void> resetToDefaults() async {
    final defaultSettings = NotificationSettings.defaultSettings();
    await _updateSettings(defaultSettings);
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö
  Future<void> _updateSettings(NotificationSettings newSettings) async {
    try {
      state = newSettings;
      await _service.saveSettings(newSettings);
      debugPrint('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –¥–µ–Ω—å
  List<DateTime> getSchedulePreview({DateTime? date}) {
    final targetDate = date ?? DateTime.now();
    return state.getNotificationTimesForDay(targetDate);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  bool isActiveAtTime(DateTime time) {
    return state.shouldWorkAtTime(time);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
  Future<String> getNextNotificationInfo() async {
    try {
      final stats = await _service.getNotificationStatistics();
      final nextTime = stats['nextNotificationTime'] as DateTime?;
      
      if (nextTime == null) {
        return state.isEnabled ? '–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã';
      }
      
      final now = DateTime.now();
      final difference = nextTime.difference(now);
      
      if (difference.inDays > 0) {
        return '–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ ${nextTime.hour}:${nextTime.minute.toString().padLeft(2, '0')}';
      } else if (difference.inHours > 0) {
        return '–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${difference.inHours} —á ${difference.inMinutes % 60} –º–∏–Ω';
      } else if (difference.inMinutes > 0) {
        return '–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${difference.inMinutes} –º–∏–Ω';
      } else {
        return '–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ';
      }
    } catch (e) {
      return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
  Future<Map<String, int>> getDailyStatistics({DateTime? date}) async {
    final targetDate = date ?? DateTime.now();
    final stats = await _service.getNotificationStatistics();
    
    final planned = state.getNotificationTimesForDay(targetDate).length;
    final shown = (stats['shownToday'] as int?) ?? 0;
    
    return {
      'planned': planned,
      'shown': shown,
      'remaining': planned - shown,
    };
  }
}

/// Provider –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
final nextNotificationInfoProvider = FutureProvider<String>((ref) async {
  final controller = ref.watch(notificationSettingsProvider.notifier);
  return await controller.getNextNotificationInfo();
});

/// Provider –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
final dailyStatisticsProvider = FutureProvider.family<Map<String, int>, DateTime?>((ref, date) async {
  final controller = ref.watch(notificationSettingsProvider.notifier);
  return await controller.getDailyStatistics(date: date);
});

/// Provider –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
final schedulePreviewProvider = Provider.family<List<DateTime>, DateTime?>((ref, date) {
  final controller = ref.watch(notificationSettingsProvider.notifier);
  return controller.getSchedulePreview(date: date);
});
