import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:hive/hive.dart';

import '../models/quote_model.dart';
import '../models/notification_settings.dart';
import '../data/quotes_data.dart';
import '../../path/models/user_progress_model.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏
class BackgroundNotificationService {
  static const String _settingsBoxName = 'notification_settings';
  static const String _historyBoxName = 'notification_history';
  
  static final BackgroundNotificationService _instance = BackgroundNotificationService._internal();
  factory BackgroundNotificationService() => _instance;
  BackgroundNotificationService._internal();

  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin = 
      FlutterLocalNotificationsPlugin();
  
  bool _isInitialized = false;
  Box<NotificationSettings>? _settingsBox;
  Box<String>? _historyBox; // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç (ID)

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è timezone
      tz.initializeTimeZones();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive –±–æ–∫—Å–æ–≤
      await _initializeHive();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await _initializeLocalNotifications();

      _isInitialized = true;
      debugPrint('‚úÖ BackgroundNotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BackgroundNotificationService: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hive –±–æ–∫—Å–æ–≤
  Future<void> _initializeHive() async {
    try {
      _settingsBox = await Hive.openBox<NotificationSettings>(_settingsBoxName);
      _historyBox = await Hive.openBox<String>(_historyBoxName);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Hive: $e');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _initializeLocalNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    const InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ Android 13+
    await _requestPermissions();
  }

  /// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _requestPermissions() async {
    if (defaultTargetPlatform == TargetPlatform.android) {
      final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
          _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin>();

      await androidImplementation?.requestNotificationsPermission();
      await androidImplementation?.requestExactAlarmsPermission();
    } else if (defaultTargetPlatform == TargetPlatform.iOS) {
      final IOSFlutterLocalNotificationsPlugin? iosImplementation =
          _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>();

      await iosImplementation?.requestPermissions(
        alert: true,
        badge: true,
        sound: true,
      );
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  void _onNotificationTapped(NotificationResponse notificationResponse) {
    debugPrint('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ: ${notificationResponse.payload}');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  NotificationSettings getSettings() {
    return _settingsBox?.get('current') ?? NotificationSettings.defaultSettings();
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> saveSettings(NotificationSettings settings) async {
    await _settingsBox?.put('current', settings);
    
    if (settings.isEnabled) {
      await startNotifications();
    } else {
      await stopNotifications();
    }
  }

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> startNotifications() async {
    final settings = getSettings();
    if (!settings.isEnabled) return;

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    await _scheduleTodayNotifications();

    debugPrint('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã');
  }

  /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> stopNotifications() async {
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await _flutterLocalNotificationsPlugin.cancelAll();

    debugPrint('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  Future<void> _scheduleTodayNotifications() async {
    final settings = getSettings();
    final today = DateTime.now();
    
    if (!settings.shouldWorkOnDay(today)) {
      debugPrint('‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
      return;
    }

    final notificationTimes = settings.getNotificationTimesForDay(today);
    final userProgress = await _getUserProgress();
    final shownToday = await _getShownTodayIds();

    for (int i = 0; i < notificationTimes.length; i++) {
      final scheduledTime = notificationTimes[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
      if (scheduledTime.isBefore(DateTime.now())) continue;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Ü–∏—Ç–∞—Ç—É
      final quote = QuotesDatabase.getContextualQuote(
        time: scheduledTime,
        userZone: userProgress?.currentZone,
        enabledCategories: settings.enabledCategories,
        excludeIds: shownToday,
      );

      if (quote != null) {
        await _scheduleNotification(
          id: i + 1000, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          quote: quote,
          scheduledTime: scheduledTime,
          settings: settings,
        );
      }
    }

    debugPrint('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${notificationTimes.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
  }

  /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> _scheduleNotification({
    required int id,
    required Quote quote,
    required DateTime scheduledTime,
    required NotificationSettings settings,
  }) async {
    final tzDateTime = tz.TZDateTime.from(scheduledTime, tz.local);

    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'quotes_channel',
      '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã',
      channelDescription: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏ –æ—Ç AlFA',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      icon: '@mipmap/ic_launcher',
      largeIcon: DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
      styleInformation: BigTextStyleInformation(''),
    );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final title = '${quote.categoryEmoji} –ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç AlFA';
    final body = quote.text;

    await _flutterLocalNotificationsPlugin.zonedSchedule(
      id,
      title,
      body,
      tzDateTime,
      notificationDetails,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: quote.id,
    );

    debugPrint('‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${quote.id} –Ω–∞ ${scheduledTime.hour}:${scheduledTime.minute}');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserProgress?> _getUserProgress() async {
    try {
      final progressBox = await Hive.openBox<UserProgress>('user_progress');
      return progressBox.get('current');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å ID —Ü–∏—Ç–∞—Ç, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
  Future<List<String>> _getShownTodayIds() async {
    try {
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      
      final shownIds = _historyBox?.get(todayKey);
      if (shownIds != null) {
        return shownIds.split(',').where((id) => id.isNotEmpty).toList();
      }
      return [];
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: $e');
      return [];
    }
  }

  /// –î–æ–±–∞–≤–∏—Ç—å ID —Ü–∏—Ç–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
  Future<void> _addToHistory(String quoteId) async {
    try {
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      
      final existingIds = await _getShownTodayIds();
      if (!existingIds.contains(quoteId)) {
        existingIds.add(quoteId);
        await _historyBox?.put(todayKey, existingIds.join(','));
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: $e');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> showTestNotification() async {
    final quote = QuotesDatabase.getContextualQuote(
      time: DateTime.now(),
      enabledCategories: ['motivation', 'success'],
    );

    if (quote != null) {
      const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
        'test_channel',
        '–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        channelDescription: '–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è AlFA',
        importance: Importance.high,
        priority: Priority.high,
      );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(),
      );

      await _flutterLocalNotificationsPlugin.show(
        Random().nextInt(1000),
        'üß™ –¢–µ—Å—Ç: ${quote.categoryEmoji} –ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç AlFA',
        quote.text,
        notificationDetails,
        payload: quote.id,
      );

      await _addToHistory(quote.id);
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<Map<String, dynamic>> getNotificationStatistics() async {
    final settings = getSettings();
    final shownToday = await _getShownTodayIds();
    
    return {
      'isEnabled': settings.isEnabled,
      'notificationsPerDay': settings.notificationsPerDay,
      'shownToday': shownToday.length,
      'nextNotificationTime': await _getNextNotificationTime(),
      'totalQuotesAvailable': QuotesDatabase.getAllQuotes().length,
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<DateTime?> _getNextNotificationTime() async {
    try {
      final pendingNotifications = await _flutterLocalNotificationsPlugin
          .pendingNotificationRequests();
      
      if (pendingNotifications.isEmpty) return null;

      // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      final now = DateTime.now();
      final settings = getSettings();
      
      for (int hour = now.hour; hour <= settings.endHour; hour++) {
        final nextTime = DateTime(now.year, now.month, now.day, hour);
        if (nextTime.isAfter(now) && settings.shouldWorkAtTime(nextTime)) {
          return nextTime;
        }
      }
      
      // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–µ —É—Ç—Ä–æ
      final tomorrow = now.add(const Duration(days: 1));
      return DateTime(tomorrow.year, tomorrow.month, tomorrow.day, settings.startHour);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e');
      return null;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> clearHistory() async {
    await _historyBox?.clear();
    debugPrint('üßπ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
  }

  /// –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
  Future<void> dispose() async {
    await _settingsBox?.close();
    await _historyBox?.close();
  }
}
