import '../api/api_client.dart';
import '../models/api_models.dart';

class ProgressService {
  final ApiClient _apiClient = ApiClient.instance;

  // ========== DASHBOARD ==========

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
  Future<ApiResponse<ApiDashboard>> getDashboard() async {
    try {
      print('üìä Getting dashboard data...');
      
      final response = await _apiClient.get('/dashboard');
      
      if (response.isSuccess && response.data != null) {
        final dashboard = ApiDashboard.fromJson(response.data!);
        print('üìä Dashboard data received successfully');
        return ApiResponse.success(dashboard);
      } else {
        print('‚ùå Failed to get dashboard data: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞');
      }
    } catch (e) {
      print('‚ùå Dashboard service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  Future<ApiResponse<List<Map<String, dynamic>>>> getWeeklyProgress() async {
    try {
      print('üìà Getting weekly progress...');
      
      final response = await _apiClient.get('/dashboard/weekly-progress');
      
      if (response.isSuccess && response.data != null) {
        final weeklyProgress = (response.data as List<dynamic>)
            .cast<Map<String, dynamic>>();
        print('üìà Weekly progress received successfully');
        return ApiResponse.success(weeklyProgress);
      } else {
        print('‚ùå Failed to get weekly progress: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      }
    } catch (e) {
      print('‚ùå Weekly progress service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ñ–µ—Ä–∞–º
  Future<ApiResponse<Map<String, double>>> getSphereProgress() async {
    try {
      print('üîÆ Getting sphere progress...');
      
      final response = await _apiClient.get('/dashboard/sphere-progress');
      
      if (response.isSuccess && response.data != null) {
        final sphereProgress = (response.data as Map<String, dynamic>)
            .map((key, value) => MapEntry(key, (value as num).toDouble()));
        print('üîÆ Sphere progress received successfully');
        return ApiResponse.success(sphereProgress);
      } else {
        print('‚ùå Failed to get sphere progress: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ñ–µ—Ä–∞–º');
      }
    } catch (e) {
      print('‚ùå Sphere progress service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ñ–µ—Ä–∞–º: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É
  Future<ApiResponse<String>> getDailyQuote() async {
    try {
      print('üí≠ Getting daily quote...');
      
      final response = await _apiClient.get('/dashboard/quote');
      
      if (response.isSuccess && response.data != null) {
        final quote = response.data['quote'] as String? ?? 
                     response.data['message'] as String? ??
                     response.data.toString();
        print('üí≠ Daily quote received successfully');
        return ApiResponse.success(quote);
      } else {
        print('‚ùå Failed to get daily quote: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã');
      }
    } catch (e) {
      print('‚ùå Daily quote service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã: $e');
    }
  }

  // ========== PROGRESS STATS ==========

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<ApiResponse<Map<String, dynamic>>> getProgressStats({
    String? period = 'today',
    String? type,
  }) async {
    try {
      print('üìä Getting progress stats...');
      
      final queryParams = <String, String>{};
      if (period != null) queryParams['period'] = period;
      if (type != null) queryParams['type'] = type;
      
      final response = await _apiClient.get('/progress/stats', queryParams: queryParams);
      
      if (response.isSuccess && response.data != null) {
        final stats = response.data as Map<String, dynamic>;
        print('üìä Progress stats received successfully');
        return ApiResponse.success(stats);
      } else {
        print('‚ùå Failed to get progress stats: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    } catch (e) {
      print('‚ùå Progress stats service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<ApiResponse<Map<String, dynamic>>> getDashboardStats({
    String? period = 'today',
  }) async {
    try {
      print('üìà Getting dashboard stats...');
      
      final queryParams = <String, String>{};
      if (period != null) queryParams['period'] = period;
      
      final response = await _apiClient.get('/progress/dashboard', queryParams: queryParams);
      
      if (response.isSuccess && response.data != null) {
        final dashboardStats = response.data as Map<String, dynamic>;
        print('üìà Dashboard stats received successfully');
        return ApiResponse.success(dashboardStats);
      } else {
        print('‚ùå Failed to get dashboard stats: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞');
      }
    } catch (e) {
      print('‚ùå Dashboard stats service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞: $e');
    }
  }

  // ========== GOALS ==========

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<ApiResponse<List<Map<String, dynamic>>>> getUserGoals({
    String? status,
    String? category,
    int? limit,
  }) async {
    try {
      print('üéØ Getting user goals...');
      
      final queryParams = <String, String>{};
      if (status != null) queryParams['status'] = status;
      if (category != null) queryParams['category'] = category;
      if (limit != null) queryParams['limit'] = limit.toString();
      
      final response = await _apiClient.get('/progress/goals', queryParams: queryParams);
      
      if (response.isSuccess && response.data != null) {
        final goals = (response.data as List<dynamic>)
            .cast<Map<String, dynamic>>();
        print('üéØ User goals received successfully');
        return ApiResponse.success(goals);
      } else {
        print('‚ùå Failed to get user goals: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π');
      }
    } catch (e) {
      print('‚ùå User goals service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π: $e');
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
  Future<ApiResponse<Map<String, dynamic>>> createGoal({
    required String title,
    required String description,
    required String category,
    required DateTime targetDate,
    String? priority = 'medium',
  }) async {
    try {
      print('üéØ Creating goal...');
      
      final goalData = {
        'title': title,
        'description': description,
        'category': category,
        'targetDate': targetDate.toIso8601String(),
        'priority': priority,
      };
      
      final response = await _apiClient.post('/progress/goals', body: goalData);
      
      if (response.isSuccess && response.data != null) {
        final goal = response.data as Map<String, dynamic>;
        print('üéØ Goal created successfully');
        return ApiResponse.success(goal);
      } else {
        print('‚ùå Failed to create goal: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏');
      }
    } catch (e) {
      print('‚ùå Create goal service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏: $e');
    }
  }

  // ========== ACHIEVEMENTS ==========

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<ApiResponse<List<Map<String, dynamic>>>> getUserAchievements({
    bool? unlocked,
    String? category,
  }) async {
    try {
      print('üèÜ Getting user achievements...');
      
      final queryParams = <String, String>{};
      if (unlocked != null) queryParams['unlocked'] = unlocked.toString();
      if (category != null) queryParams['category'] = category;
      
      final response = await _apiClient.get('/progress/achievements', queryParams: queryParams);
      
      if (response.isSuccess && response.data != null) {
        final achievements = (response.data as List<dynamic>)
            .cast<Map<String, dynamic>>();
        print('üèÜ User achievements received successfully');
        return ApiResponse.success(achievements);
      } else {
        print('‚ùå Failed to get user achievements: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      }
    } catch (e) {
      print('‚ùå User achievements service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  // ========== PROGRESS ENTRIES ==========

  /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<ApiResponse<List<Map<String, dynamic>>>> getProgressEntries({
    String? type,
    DateTime? startDate,
    DateTime? endDate,
    int? limit,
  }) async {
    try {
      print('üìù Getting progress entries...');
      
      final queryParams = <String, String>{};
      if (type != null) queryParams['type'] = type;
      if (startDate != null) queryParams['startDate'] = startDate.toIso8601String();
      if (endDate != null) queryParams['endDate'] = endDate.toIso8601String();
      if (limit != null) queryParams['limit'] = limit.toString();
      
      final response = await _apiClient.get('/progress/entries', queryParams: queryParams);
      
      if (response.isSuccess && response.data != null) {
        final entries = (response.data as List<dynamic>)
            .cast<Map<String, dynamic>>();
        print('üìù Progress entries received successfully');
        return ApiResponse.success(entries);
      } else {
        print('‚ùå Failed to get progress entries: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      }
    } catch (e) {
      print('‚ùå Progress entries service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: $e');
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  Future<ApiResponse<Map<String, dynamic>>> createProgressEntry({
    required String type,
    required Map<String, dynamic> data,
    String? notes,
  }) async {
    try {
      print('üìù Creating progress entry...');
      
      final entryData = {
        'type': type,
        'data': data,
        'notes': notes,
        'timestamp': DateTime.now().toIso8601String(),
      };
      
      final response = await _apiClient.post('/progress/entries', body: entryData);
      
      if (response.isSuccess && response.data != null) {
        final entry = response.data as Map<String, dynamic>;
        print('üìù Progress entry created successfully');
        return ApiResponse.success(entry);
      } else {
        print('‚ùå Failed to create progress entry: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      }
    } catch (e) {
      print('‚ùå Create progress entry service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: $e');
    }
  }
}
