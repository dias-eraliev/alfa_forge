import '../api/api_client.dart';
import '../models/api_models.dart';

class HabitsService {
  final ApiClient _apiClient = ApiClient.instance;

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<ApiResponse<List<ApiHabit>>> getHabits({
    String? category,
    String? frequency,
    bool? isActive,
  }) async {
    final queryParams = <String, String>{};
    if (category != null) queryParams['category'] = category;
    if (frequency != null) queryParams['frequency'] = frequency;
    if (isActive != null) queryParams['isActive'] = isActive.toString();

    return await _apiClient.get<List<ApiHabit>>(
      '/habits',
      queryParams: queryParams.isNotEmpty ? queryParams : null,
      fromJson: (json) {
        final List<dynamic> habitsList = json['data'] ?? json;
        return habitsList.map((habit) => ApiHabit.fromJson(habit)).toList();
      },
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø–æ ID
  Future<ApiResponse<ApiHabit>> getHabitById(String id) async {
    return await _apiClient.get<ApiHabit>(
      '/habits/$id',
      fromJson: (json) => ApiHabit.fromJson(json),
    );
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
  Future<ApiResponse<ApiHabit>> createHabit(CreateHabitDto habitDto) async {
    return await _apiClient.post<ApiHabit>(
      '/habits',
      body: habitDto.toJson(),
      fromJson: (json) => ApiHabit.fromJson(json),
    );
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
  Future<ApiResponse<ApiHabit>> updateHabit(String id, CreateHabitDto habitDto) async {
    return await _apiClient.put<ApiHabit>(
      '/habits/$id',
      body: habitDto.toJson(),
      fromJson: (json) => ApiHabit.fromJson(json),
    );
  }

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
  Future<ApiResponse<Map<String, dynamic>>> deleteHabit(String id) async {
    return await _apiClient.delete<Map<String, dynamic>>('/habits/$id');
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  Future<ApiResponse<ApiHabitCompletion>> completeHabit(
    String habitId, {
    DateTime? date,
    int count = 1,
    String? notes,
  }) async {
    final body = <String, dynamic>{
      'date': (date ?? DateTime.now()).toIso8601String(),
      'count': count,
      if (notes != null) 'notes': notes,
    };

    return await _apiClient.post<ApiHabitCompletion>(
      '/habits/$habitId/complete',
      body: body,
      fromJson: (json) => ApiHabitCompletion.fromJson(json),
    );
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  Future<ApiResponse<Map<String, dynamic>>> uncompleteHabit(
    String habitId,
    DateTime date,
  ) async {
    final dateStr = date.toIso8601String().substring(0, 10); // YYYY-MM-DD
    return await _apiClient.delete<Map<String, dynamic>>(
      '/habits/$habitId/complete/$dateStr',
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–∫–∏
  Future<ApiResponse<Map<String, dynamic>>> getHabitStats(
    String habitId, {
    int days = 30,
  }) async {
    return await _apiClient.get<Map<String, dynamic>>(
      '/habits/$habitId/stats',
      queryParams: {'days': days.toString()},
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫
  Future<ApiResponse<List<String>>> getHabitCategories() async {
    return await _apiClient.get<List<String>>(
      '/habits/categories/list',
      fromJson: (json) {
        final List<dynamic> categories = json['data'] ?? json;
        return categories.cast<String>();
      },
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏–≤—ã—á–µ–∫
  Future<ApiResponse<List<Map<String, dynamic>>>> getHabitTemplates() async {
    return await _apiClient.get<List<Map<String, dynamic>>>(
      '/habits/templates/list',
      fromJson: (json) {
        final List<dynamic> templates = json['data'] ?? json;
        return templates.cast<Map<String, dynamic>>();
      },
    );
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø PATH PAGE ==========

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏)
  Future<ApiResponse<List<ApiHabit>>> getTodayHabits() async {
    try {
      print('üèÉ‚Äç‚ôÇÔ∏è Getting today habits...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
      final response = await getHabits(isActive: true);
      
      if (response.isSuccess && response.data != null) {
        print('üèÉ‚Äç‚ôÇÔ∏è Today habits received successfully: ${response.data!.length} habits');
        return response;
      } else {
        print('‚ùå Failed to get today habits: ${response.error}');
        return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫');
      }
    } catch (e) {
      print('‚ùå Today habits service error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫: $e');
    }
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
  Future<ApiResponse<ApiHabitCompletion>> toggleHabitCompletion(String habitId) async {
    try {
      print('üîÑ Toggling habit completion for $habitId...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
      final today = DateTime.now();
      final habit = await getHabitById(habitId);
      
      if (!habit.isSuccess || habit.data == null) {
        return ApiResponse.error('–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
      final todayCompletion = habit.data!.completions.any((c) => 
        c.date.day == today.day &&
        c.date.month == today.month &&
        c.date.year == today.year
      );
      
      if (todayCompletion) {
        // –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –æ—Ç–º–µ–Ω—è–µ–º
        final response = await uncompleteHabit(habitId, today);
        if (response.isSuccess) {
          print('‚úÖ Habit completion removed successfully');
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π completion –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
          return ApiResponse.success(ApiHabitCompletion(
            id: '', 
            habitId: habitId, 
            date: today, 
            count: 0
          ));
        } else {
          return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –æ—Ç–º–µ—á–∞–µ–º
        final response = await completeHabit(habitId);
        if (response.isSuccess) {
          print('‚úÖ Habit completed successfully');
          return response;
        } else {
          return ApiResponse.error(response.error ?? '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏');
        }
      }
    } catch (e) {
      print('‚ùå Toggle habit completion error: $e');
      return ApiResponse.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏: $e');
    }
  }
}
