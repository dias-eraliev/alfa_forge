import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/auth_service.dart';
import '../models/api_models.dart';
import '../api/api_client.dart';

enum AuthState {
  initial,
  loading,
  authenticated,
  unauthenticated,
  error,
}

class AuthProvider extends ChangeNotifier {
  final AuthService _authService = AuthService();
  
  AuthState _state = AuthState.initial;
  ApiUser? _user;
  String? _errorMessage;
  bool _isLoading = false;

  // Getters
  AuthState get state => _state;
  ApiUser? get user => _user;
  String? get errorMessage => _errorMessage;
  bool get isLoading => _isLoading;
  bool get isAuthenticated => _state == AuthState.authenticated;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  Future<void> initialize() async {
    print('üë§üë§üë§ AuthProvider INITIALIZE START üë§üë§üë§');
    _setState(AuthState.loading);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      final isAuth = _authService.isAuthenticated;
      print('üë§ AuthService isAuthenticated: $isAuth');
      
      if (isAuth) {
        print('üë§ Loading current user...');
        await _loadCurrentUser();
      } else {
        print('üë§ No auth tokens, setting unauthenticated');
        _setState(AuthState.unauthenticated);
      }
    } catch (e) {
      print('üë§ Error during initialization: $e');
      _setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
    }
    
    print('üë§ AuthProvider final state: $_state');
    print('üë§üë§üë§ AuthProvider INITIALIZE END üë§üë§üë§');
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> _loadCurrentUser() async {
    try {
      final response = await _authService.getCurrentUser();
      
      if (response.isSuccess && response.data != null) {
        _user = response.data;
        _setState(AuthState.authenticated);
      } else {
        // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –≤—ã—Ö–æ–¥–∏–º
        await logout();
      }
    } catch (e) {
      await logout();
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<bool> register({
    required String email,
    required String password,
    required String name,
  }) async {
    _setLoading(true);
    
    try {
      final registerDto = RegisterDto(
        email: email,
        password: password,
        name: name,
      );
      
      final response = await _authService.register(registerDto);
      
      if (response.isSuccess && response.data != null) {
        await _authService.saveAuthTokens(response.data!);
        _user = response.data!.user;
        _setState(AuthState.authenticated);
        return true;
      } else {
        _setError(response.error ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        return false;
      }
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  // –í—Ö–æ–¥
  Future<bool> login({
    required String email,
    required String password,
  }) async {
    _setLoading(true);
    
    try {
      final loginDto = LoginDto(
        email: email,
        password: password,
      );
      
      final response = await _authService.login(loginDto);
      
      if (response.isSuccess && response.data != null) {
        await _authService.saveAuthTokens(response.data!);
        _user = response.data!.user;
        _setState(AuthState.authenticated);
        return true;
      } else {
        _setError(response.error ?? '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
        return false;
      }
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  // –í—ã—Ö–æ–¥
  Future<void> logout() async {
    _setLoading(true);
    
    try {
      await _authService.signOut();
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
    } finally {
      _user = null;
      _setState(AuthState.unauthenticated);
      _setLoading(false);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> updateProfile({
    String? name,
    String? avatar,
  }) async {
    if (_user == null) return false;
    
    _setLoading(true);
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      notifyListeners();
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return false;
    } finally {
      _setLoading(false);
    }
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  Future<bool> completeOnboarding() async {
    if (_user == null) return false;
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      notifyListeners();
      return true;
    } catch (e) {
      _setError('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: $e');
      return false;
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
  void clearError() {
    _errorMessage = null;
    notifyListeners();
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  void _setState(AuthState newState) {
    _state = newState;
    _errorMessage = null;
    notifyListeners();
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _errorMessage = error;
    _state = AuthState.error;
    _isLoading = false;
    notifyListeners();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  bool get needsOnboarding => 
    _user != null && !_user!.isOnboardingCompleted;

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  String get userInitials {
    if (_user?.name == null || _user!.name.isEmpty) return 'U';
    
    final names = _user!.name.split(' ');
    if (names.length >= 2) {
      return '${names[0][0]}${names[1][0]}'.toUpperCase();
    }
    return _user!.name[0].toUpperCase();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  String get greeting {
    if (_user?.name == null) return '–ü—Ä–∏–≤–µ—Ç!';
    
    final hour = DateTime.now().hour;
    String timeGreeting;
    
    if (hour < 12) {
      timeGreeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    } else if (hour < 17) {
      timeGreeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    } else {
      timeGreeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }
    
    return '$timeGreeting, ${_user!.name}!';
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  Future<void> refreshUserState() async {
    if (_authService.isAuthenticated) {
      await _loadCurrentUser();
    }
  }
}

// Riverpod –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è AuthProvider
final authProviderNotifier = ChangeNotifierProvider<AuthProvider>((ref) {
  return AuthProvider();
});
