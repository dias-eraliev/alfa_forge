import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { 
  CreateExerciseDto, 
  UpdateExerciseDto, 
  ExerciseFilterDto,
  CreateWorkoutSessionDto,
  UpdateWorkoutSessionDto,
  WorkoutFilterDto,
  CreateGTOResultDto,
  UpdateGTOResultDto,
  GTOFilterDto,
  ExerciseStatsDto,
  WorkoutStatus
} from './dto/exercises.dto';

@Injectable()
export class ExercisesService {
  constructor(private prisma: PrismaService) {}

  // ========== EXERCISES ==========

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  async getExercises(filters?: ExerciseFilterDto) {
    const where: any = {};

    if (filters?.type) {
      where.type = filters.type;
    }

    if (filters?.category) {
      where.category = filters.category;
    }

    if (filters?.difficulty) {
      where.difficulty = filters.difficulty;
    }

    if (filters?.requiresEquipment !== undefined) {
      where.requiresEquipment = filters.requiresEquipment;
    }

    if (filters?.search) {
      where.OR = [
        { name: { contains: filters.search, mode: 'insensitive' } },
        { description: { contains: filters.search, mode: 'insensitive' } }
      ];
    }

    return this.prisma.exercise.findMany({
      where,
      orderBy: [
        { category: 'asc' },
        { difficulty: 'asc' },
        { name: 'asc' }
      ]
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ ID
  async getExerciseById(id: string) {
    const exercise = await this.prisma.exercise.findUnique({
      where: { id }
    });

    if (!exercise) {
      throw new NotFoundException('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    return exercise;
  }

  // –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async createExercise(createExerciseDto: CreateExerciseDto) {
    const exerciseData = {
      ...createExerciseDto,
      description: createExerciseDto.description || '', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      iconEmoji: 'üèÉ', // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      instructions: createExerciseDto.instructions ? [createExerciseDto.instructions] : []
    };

    return this.prisma.exercise.create({
      data: exerciseData as any
    });
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async updateExercise(id: string, updateExerciseDto: UpdateExerciseDto) {
    await this.getExerciseById(id);

    const updateData: any = {};
    
    if (updateExerciseDto.name) updateData.name = updateExerciseDto.name;
    if (updateExerciseDto.description) updateData.description = updateExerciseDto.description;
    if (updateExerciseDto.type) updateData.type = updateExerciseDto.type;
    if (updateExerciseDto.category) updateData.category = updateExerciseDto.category;
    if (updateExerciseDto.difficulty) updateData.difficulty = updateExerciseDto.difficulty;
    if (updateExerciseDto.instructions) updateData.instructions = [updateExerciseDto.instructions];

    return this.prisma.exercise.update({
      where: { id },
      data: updateData
    });
  }

  // –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async deleteExercise(id: string) {
    await this.getExerciseById(id);

    await this.prisma.exercise.delete({
      where: { id }
    });

    return { message: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ì–¢–û
  async getGTOExercises() {
    return this.prisma.exercise.findMany({
      where: { category: 'STRENGTH' }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      orderBy: { name: 'asc' }
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  async getRecommendedExercises(userId: string, category?: string) {
    const where: any = {};
    
    if (category) {
      where.category = category;
    }

    return this.prisma.exercise.findMany({
      where,
      orderBy: { difficulty: 'asc' },
      take: 10
    });
  }

  // ========== WORKOUT SESSIONS ==========

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserWorkouts(userId: string, filters?: WorkoutFilterDto) {
    const where: any = { userId };

    if (filters?.status) {
      where.status = filters.status;
    }

    if (filters?.startDate || filters?.endDate) {
      where.createdAt = {};
      if (filters.startDate) {
        where.createdAt.gte = new Date(filters.startDate);
      }
      if (filters.endDate) {
        where.createdAt.lte = new Date(filters.endDate);
      }
    }

    return this.prisma.workoutSession.findMany({
      where,
      orderBy: { createdAt: 'desc' }
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ ID
  async getWorkoutById(id: string, userId: string) {
    const workout = await this.prisma.workoutSession.findUnique({
      where: { id }
    });

    if (!workout) {
      throw new NotFoundException('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (workout.userId !== userId) {
      throw new ForbiddenException('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ');
    }

    return workout;
  }

  // –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  async createWorkout(userId: string, createWorkoutDto: CreateWorkoutSessionDto) {
    const workoutData = {
      name: createWorkoutDto.name,
      userId,
      status: 'PLANNED' as any,
      startTime: createWorkoutDto.scheduledDate ? new Date(createWorkoutDto.scheduledDate) : new Date(),
      duration: 0,
      totalTargetReps: 0,
      totalCompletedReps: 0,
      averageQuality: 0,
      notes: createWorkoutDto.notes
    };

    return this.prisma.workoutSession.create({
      data: workoutData
    });
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  async updateWorkout(id: string, userId: string, updateWorkoutDto: UpdateWorkoutSessionDto) {
    await this.getWorkoutById(id, userId);

    const updateData: any = {
      name: updateWorkoutDto.name,
      notes: updateWorkoutDto.notes,
      status: updateWorkoutDto.status
    };
    
    if (updateWorkoutDto.scheduledDate) {
      updateData.startTime = new Date(updateWorkoutDto.scheduledDate);
    }

    return this.prisma.workoutSession.update({
      where: { id },
      data: updateData
    });
  }

  // –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  async deleteWorkout(id: string, userId: string) {
    await this.getWorkoutById(id, userId);

    await this.prisma.workoutSession.delete({
      where: { id }
    });

    return { message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' };
  }

  // –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  async startWorkout(id: string, userId: string) {
    await this.getWorkoutById(id, userId);

    return this.prisma.workoutSession.update({
      where: { id },
      data: {
        status: 'IN_PROGRESS' as any,
        startTime: new Date()
      }
    });
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
  async completeWorkout(id: string, userId: string, _caloriesBurned?: number) {
    const workout = await this.getWorkoutById(id, userId);

    const endTime = new Date();
    const duration = Math.floor((endTime.getTime() - workout.startTime.getTime()) / 1000);

    return this.prisma.workoutSession.update({
      where: { id },
      data: {
        status: 'COMPLETED' as any,
        endTime,
        duration
      }
    });
  }

  // ========== STATISTICS ==========

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  async getExerciseStats(userId: string, statsDto: ExerciseStatsDto) {
    const startDate = new Date(statsDto.startDate);
    const endDate = new Date(statsDto.endDate);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const workouts = await this.prisma.workoutSession.findMany({
      where: {
        userId,
        createdAt: {
          gte: startDate,
          lte: endDate
        }
      }
    });

    // –ü–æ–¥—Å—á–µ—Ç—ã
    const totalWorkouts = workouts.length;
    const completedWorkouts = workouts.filter(w => w.status === 'COMPLETED').length;
    const totalDuration = workouts.reduce((sum, w) => sum + w.duration, 0);

    return {
      period: {
        startDate: statsDto.startDate,
        endDate: statsDto.endDate
      },
      workouts: {
        total: totalWorkouts,
        completed: completedWorkouts,
        completionRate: totalWorkouts > 0 ? (completedWorkouts / totalWorkouts) * 100 : 0,
        totalDuration,
        averageDuration: completedWorkouts > 0 ? totalDuration / completedWorkouts : 0
      }
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
  async getExerciseProgress(userId: string, exerciseId: string, days: number = 30) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const workouts = await this.prisma.workoutSession.findMany({
      where: {
        userId,
        createdAt: {
          gte: startDate
        }
      },
      orderBy: { createdAt: 'asc' }
    });

    return {
      workouts
    };
  }

  // –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ì–¢–û (–∑–∞–≥–ª—É—à–∫–∏)
  async getUserGTOResults(_userId: string, _filters?: GTOFilterDto) {
    return [];
  }

  async createGTOResult(_userId: string, _createGTOResultDto: CreateGTOResultDto) {
    return { message: '–ì–¢–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω' };
  }

  async updateGTOResult(_id: string, _userId: string, _updateGTOResultDto: UpdateGTOResultDto) {
    return { message: '–ì–¢–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω' };
  }

  async deleteGTOResult(_id: string, _userId: string) {
    return { message: '–ì–¢–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω' };
  }
}
