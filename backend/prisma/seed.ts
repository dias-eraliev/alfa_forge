import { PrismaClient } from 'generated/prisma';
import { hash } from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Starting seed...');

    // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    console.log('üìã Creating habit categories...');
    const categories = await Promise.all([
        prisma.habitCategory.upsert({
            where: { id: 'health' },
            update: {},
            create: {
                id: 'health',
                name: '–ó–¥–æ—Ä–æ–≤—å–µ',
                displayName: '–ó–¥–æ—Ä–æ–≤—å–µ',
                iconName: 'favorite',
                colorHex: '#E91E63',
            },
        }),
        prisma.habitCategory.upsert({
            where: { id: 'fitness' },
            update: {},
            create: {
                id: 'fitness',
                name: '–§–∏—Ç–Ω–µ—Å',
                displayName: '–§–∏—Ç–Ω–µ—Å',
                iconName: 'fitness_center',
                colorHex: '#FF5722',
            },
        }),
        prisma.habitCategory.upsert({
            where: { id: 'mind' },
            update: {},
            create: {
                id: 'mind',
                name: '–†–∞–∑—É–º',
                displayName: '–†–∞–∑—É–º',
                iconName: 'psychology',
                colorHex: '#9C27B0',
            },
        }),
    ]);

    // 2. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏–≤—ã—á–µ–∫ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    console.log('üìù Creating habit templates...');
    let templatesCreated = 0;
    const ensureHabitTemplate = async (data: Parameters<typeof prisma.habitTemplate.create>[0]['data']) => {
        const exists = await prisma.habitTemplate.findFirst({ where: { name: data.name } });
        if (!exists) {
            await prisma.habitTemplate.create({ data });
            templatesCreated++;
        }
    };
    await ensureHabitTemplate({
        name: '–ü–∏—Ç—å –≤–æ–¥—É',
        description: '–í—ã–ø–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –¥–µ–Ω—å',
        iconName: 'water_drop',
        colorHex: '#2196F3',
        categoryId: 'health',
        defaultFrequencyType: 'DAILY',
        isPopular: true,
        tips: ['–ù–æ—Å–∏—Ç–µ –±—É—Ç—ã–ª–∫—É —Å –≤–æ–¥–æ–π', '–°—Ç–∞–≤—å—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'],
    });
    await ensureHabitTemplate({
        name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è',
        description: '–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏',
        iconName: 'self_improvement',
        colorHex: '#9C27B0',
        categoryId: 'mind',
        defaultFrequencyType: 'DAILY',
        isPopular: true,
        tips: ['–ù–∞—á–Ω–∏—Ç–µ —Å 5 –º–∏–Ω—É—Ç', '–ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ'],
    });

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ —á–µ—Ä–µ–∑ upsert)
    console.log('üìè Creating measurement types...');

    const upsertMeasurementType = (m: {
        id: string;
        name: string;
        shortName: string;
        category: 'BASIC' | 'BODY' | 'COMPOSITION' | 'VITAL';
        unit: 'KG' | 'CM' | 'PERCENT' | 'BPM' | 'MMHG' | 'CELSIUS' | 'KCAL';
        minValue?: number;
        maxValue?: number;
        defaultValue?: number;
        iconName: string;
        isRequired?: boolean;
        allowsDecimal?: boolean;
        decimalPlaces?: number;
        description?: string;
    }) =>
        prisma.measurementType.upsert({
            where: { id: m.id },
            create: {
                id: m.id,
                name: m.name,
                shortName: m.shortName,
                category: m.category,
                unit: m.unit,
                minValue: m.minValue,
                maxValue: m.maxValue,
                defaultValue: m.defaultValue,
                iconName: m.iconName,
                isRequired: m.isRequired ?? false,
                allowsDecimal: m.allowsDecimal ?? true,
                decimalPlaces: m.decimalPlaces ?? 1,
                description: m.description,
            },
            update: {
                name: m.name,
                shortName: m.shortName,
                category: m.category,
                unit: m.unit,
                minValue: m.minValue,
                maxValue: m.maxValue,
                defaultValue: m.defaultValue,
                iconName: m.iconName,
                isRequired: m.isRequired ?? false,
                allowsDecimal: m.allowsDecimal ?? true,
                decimalPlaces: m.decimalPlaces ?? 1,
                description: m.description,
            },
        });

    const measurementTypes = await Promise.all([
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        upsertMeasurementType({
            id: 'weight',
            name: '–í–µ—Å',
            shortName: '–í–µ—Å',
            category: 'BASIC',
            unit: 'KG',
            minValue: 30,
            maxValue: 200,
            iconName: 'monitor_weight',
            isRequired: true,
            allowsDecimal: true,
            decimalPlaces: 1,
            description: '–û–±—â–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞',
        }),
        upsertMeasurementType({
            id: 'height',
            name: '–†–æ—Å—Ç',
            shortName: '–†–æ—Å—Ç',
            category: 'BASIC',
            unit: 'CM',
            minValue: 100,
            maxValue: 250,
            iconName: 'height',
            allowsDecimal: false,
            decimalPlaces: 0,
            description: '–†–æ—Å—Ç –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç',
        }),

        // –û–±—ä–µ–º—ã —Ç–µ–ª–∞
        upsertMeasurementType({ id: 'chest', name: '–ì—Ä—É–¥—å/–ë—é—Å—Ç', shortName: '–ì—Ä—É–¥—å', category: 'BODY', unit: 'CM', minValue: 60, maxValue: 150, iconName: 'fitness_center', description: '–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏/–±—é—Å—Ç–∞' }),
        upsertMeasurementType({ id: 'waist', name: '–¢–∞–ª–∏—è', shortName: '–¢–∞–ª–∏—è', category: 'BODY', unit: 'CM', minValue: 50, maxValue: 150, iconName: 'straighten', description: '–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–∞–º–æ–π —É–∑–∫–æ–π —á–∞—Å—Ç–∏' }),
        upsertMeasurementType({ id: 'hips', name: '–ë–µ–¥—Ä–∞', shortName: '–ë–µ–¥—Ä–∞', category: 'BODY', unit: 'CM', minValue: 60, maxValue: 150, iconName: 'accessibility', description: '–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —á–∞—Å—Ç–∏' }),
        upsertMeasurementType({ id: 'bicep_left', name: '–ë–∏—Ü–µ–ø—Å (–ª–µ–≤—ã–π)', shortName: '–ë–∏—Ü–µ–ø—Å –õ', category: 'BODY', unit: 'CM', minValue: 15, maxValue: 60, iconName: 'sports_martial_arts', description: '–û–±—Ö–≤–∞—Ç –ª–µ–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞' }),
        upsertMeasurementType({ id: 'bicep_right', name: '–ë–∏—Ü–µ–ø—Å (–ø—Ä–∞–≤—ã–π)', shortName: '–ë–∏—Ü–µ–ø—Å –ü', category: 'BODY', unit: 'CM', minValue: 15, maxValue: 60, iconName: 'sports_martial_arts', description: '–û–±—Ö–≤–∞—Ç –ø—Ä–∞–≤–æ–≥–æ –±–∏—Ü–µ–ø—Å–∞' }),
        upsertMeasurementType({ id: 'thigh_left', name: '–ë–µ–¥—Ä–æ (–ª–µ–≤–æ–µ)', shortName: '–ë–µ–¥—Ä–æ –õ', category: 'BODY', unit: 'CM', minValue: 30, maxValue: 80, iconName: 'directions_run', description: '–û–±—Ö–≤–∞—Ç –ª–µ–≤–æ–≥–æ –±–µ–¥—Ä–∞' }),
        upsertMeasurementType({ id: 'thigh_right', name: '–ë–µ–¥—Ä–æ (–ø—Ä–∞–≤–æ–µ)', shortName: '–ë–µ–¥—Ä–æ –ü', category: 'BODY', unit: 'CM', minValue: 30, maxValue: 80, iconName: 'directions_run', description: '–û–±—Ö–≤–∞—Ç –ø—Ä–∞–≤–æ–≥–æ –±–µ–¥—Ä–∞' }),
        upsertMeasurementType({ id: 'neck', name: '–®–µ—è', shortName: '–®–µ—è', category: 'BODY', unit: 'CM', minValue: 25, maxValue: 50, iconName: 'person', description: '–û–±—Ö–≤–∞—Ç —à–µ–∏' }),
        upsertMeasurementType({ id: 'forearm_left', name: '–ü—Ä–µ–¥–ø–ª–µ—á—å–µ (–ª–µ–≤–æ–µ)', shortName: '–ü—Ä–µ–¥–ø–ª. –õ', category: 'BODY', unit: 'CM', minValue: 15, maxValue: 40, iconName: 'sports_handball', description: '–û–±—Ö–≤–∞—Ç –ª–µ–≤–æ–≥–æ –ø—Ä–µ–¥–ø–ª–µ—á—å—è' }),
        upsertMeasurementType({ id: 'forearm_right', name: '–ü—Ä–µ–¥–ø–ª–µ—á—å–µ (–ø—Ä–∞–≤–æ–µ)', shortName: '–ü—Ä–µ–¥–ø–ª. –ü', category: 'BODY', unit: 'CM', minValue: 15, maxValue: 40, iconName: 'sports_handball', description: '–û–±—Ö–≤–∞—Ç –ø—Ä–∞–≤–æ–≥–æ –ø—Ä–µ–¥–ø–ª–µ—á—å—è' }),
        upsertMeasurementType({ id: 'calf_left', name: '–ò–∫—Ä–∞ (–ª–µ–≤–∞—è)', shortName: '–ò–∫—Ä–∞ –õ', category: 'BODY', unit: 'CM', minValue: 20, maxValue: 50, iconName: 'directions_walk', description: '–û–±—Ö–≤–∞—Ç –ª–µ–≤–æ–π –∏–∫—Ä—ã' }),
        upsertMeasurementType({ id: 'calf_right', name: '–ò–∫—Ä–∞ (–ø—Ä–∞–≤–∞—è)', shortName: '–ò–∫—Ä–∞ –ü', category: 'BODY', unit: 'CM', minValue: 20, maxValue: 50, iconName: 'directions_walk', description: '–û–±—Ö–≤–∞—Ç –ø—Ä–∞–≤–æ–π –∏–∫—Ä—ã' }),

        // –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ç–µ–ª–∞
        upsertMeasurementType({ id: 'body_fat', name: '–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞', shortName: '–ñ–∏—Ä', category: 'COMPOSITION', unit: 'PERCENT', minValue: 3, maxValue: 50, iconName: 'water_drop', description: '–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–æ–≤–æ–π —Ç–∫–∞–Ω–∏' }),
        upsertMeasurementType({ id: 'muscle_mass', name: '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞', shortName: '–ú—ã—à—Ü—ã', category: 'COMPOSITION', unit: 'KG', minValue: 15, maxValue: 100, iconName: 'fitness_center', description: '–ú–∞—Å—Å–∞ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏' }),
        upsertMeasurementType({ id: 'bone_mass', name: '–ö–æ—Å—Ç–Ω–∞—è –º–∞—Å—Å–∞', shortName: '–ö–æ—Å—Ç–∏', category: 'COMPOSITION', unit: 'KG', minValue: 1, maxValue: 10, iconName: 'account_tree', description: '–ú–∞—Å—Å–∞ –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏' }),
        upsertMeasurementType({ id: 'water_percent', name: '–í–æ–¥–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ', shortName: '–í–æ–¥–∞', category: 'COMPOSITION', unit: 'PERCENT', minValue: 45, maxValue: 75, iconName: 'opacity', description: '–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–¥—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ' }),
        upsertMeasurementType({ id: 'bmr', name: '–ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º', shortName: '–ë–ú–†', category: 'COMPOSITION', unit: 'KCAL', minValue: 800, maxValue: 3000, iconName: 'local_fire_department', allowsDecimal: false, decimalPlaces: 0, description: '–ö–∞–ª–æ—Ä–∏–π —Å–∂–∏–≥–∞–µ—Ç—Å—è –≤ –ø–æ–∫–æ–µ' }),

        // –í–∏—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        upsertMeasurementType({ id: 'heart_rate', name: '–ü—É–ª—å—Å –≤ –ø–æ–∫–æ–µ', shortName: '–ü—É–ª—å—Å', category: 'VITAL', unit: 'BPM', minValue: 40, maxValue: 120, iconName: 'favorite', allowsDecimal: false, decimalPlaces: 0, description: '–ß–°–° –≤ –ø–æ–∫–æ–µ' }),
        upsertMeasurementType({ id: 'blood_pressure_systolic', name: '–î–∞–≤–ª–µ–Ω–∏–µ (–≤–µ—Ä—Ö–Ω–µ–µ)', shortName: '–°–∏—Å—Ç.', category: 'VITAL', unit: 'MMHG', minValue: 80, maxValue: 200, iconName: 'water_drop', allowsDecimal: false, decimalPlaces: 0, description: '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î' }),
        upsertMeasurementType({ id: 'blood_pressure_diastolic', name: '–î–∞–≤–ª–µ–Ω–∏–µ (–Ω–∏–∂–Ω–µ–µ)', shortName: '–î–∏–∞—Å—Ç.', category: 'VITAL', unit: 'MMHG', minValue: 40, maxValue: 120, iconName: 'water_drop', allowsDecimal: false, decimalPlaces: 0, description: '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î' }),
        upsertMeasurementType({ id: 'body_temperature', name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞', shortName: '–¢–µ–º–ø.', category: 'VITAL', unit: 'CELSIUS', minValue: 35, maxValue: 42, iconName: 'thermostat', allowsDecimal: true, decimalPlaces: 1, description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞' }),
    ]);

    // 4. –°–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ name)
    console.log('üí™ Creating exercises...');
    const upsertExercise = (data: Parameters<typeof prisma.exercise.create>[0]['data']) =>
        prisma.exercise.upsert({
            where: { name: data.name },
            update: {
                description: data.description,
                instructions: data.instructions,
                iconEmoji: data.iconEmoji,
                difficulty: data.difficulty as any,
                category: data.category as any,
                muscleGroups: data.muscleGroups,
                hasAIDetection: data.hasAIDetection,
            },
            create: data,
        });
    await Promise.all([
        upsertExercise({
            name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞',
            instructions: [
                '–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞',
                '–†—É–∫–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
                '–û–ø—É—Å–∫–∞–π—Ç–µ—Å—å –¥–æ –∫–∞—Å–∞–Ω–∏—è –≥—Ä—É–¥—å—é –ø–æ–ª–∞'
            ],
            iconEmoji: 'üí™',
            difficulty: 'EASY',
            category: 'STRENGTH',
            muscleGroups: ['CHEST'],
            hasAIDetection: true,
        }),
        upsertExercise({
            name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
            description: '–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º',
            instructions: [
                '–í—Å—Ç–∞–Ω—å—Ç–µ –ø—Ä—è–º–æ, –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á',
                '–û–ø—É—Å–∫–∞–π—Ç–µ—Å—å, —Å–≥–∏–±–∞—è –∫–æ–ª–µ–Ω–∏'
            ],
            iconEmoji: 'ü¶µ',
            difficulty: 'EASY',
            category: 'STRENGTH',
            muscleGroups: ['LEGS'],
            hasAIDetection: true,
        }),
    ]);

    // 5. –°–æ–∑–¥–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    console.log('üí¨ Creating quotes...');
    let quotesCreated = 0;
    const ensureQuote = async (data: Parameters<typeof prisma.quote.create>[0]['data']) => {
        const exists = await prisma.quote.findFirst({ where: { text: data.text, author: data.author } });
        if (!exists) {
            await prisma.quote.create({ data });
            quotesCreated++;
        }
    };
    await ensureQuote({
        text: '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - —ç—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.',
        author: '–î–∂–∏–º –†–æ–Ω',
        category: 'DISCIPLINE',
        timeContext: 'MORNING',
        priority: 10,
        tags: ['–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'],
        targetZones: ['WILL'],
        isPremium: false,
    });
    await ensureQuote({
        text: '–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º.',
        author: '–†–æ–±–µ—Ä—Ç –ö–æ–ª—å–µ—Ä',
        category: 'SUCCESS',
        timeContext: 'EVENING',
        priority: 8,
        tags: ['—É—Å–ø–µ—Ö', '–ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ'],
        targetZones: ['WILL', 'FOCUS'],
        isPremium: false,
    });

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ Creating test user...');
    const testUser = await prisma.user.upsert({
        where: { email: 'test@example.com' },
        update: {},
        create: {
            email: 'test@example.com',
            username: 'testuser',
            passwordHash: await hash('password123', 10),
            profile: {
                create: {
                    fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    phone: '+7 900 123 45 67',
                    city: '–ê–ª–º–∞—Ç—ã',
                    avatarUrl: null,
                },
            },
            settings: {
                create: {
                    notificationsEnabled: true,
                    theme: 'DARK',
                    language: 'RU',
                },
            },
        },
    });

    // 7. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('üìä Creating user progress...');
    await prisma.userProgress.upsert({
        where: { userId: testUser.id },
        update: {
            totalSteps: 47,
            totalXP: 2847,
            currentStreak: 12,
            longestStreak: 25,
            currentZone: 'WILL',
            currentRank: 'WARRIOR',
            sphereProgress: {
                body: 0.8,
                will: 0.6,
                focus: 0.4,
                mind: 0.3,
                peace: 0.2,
                money: 0.1,
            } as any,
            totalStats: {
                habits_completed: 47,
                tasks_completed: 23,
                workouts_completed: 15,
                calories_burned: 2400,
                water_drunk: 36,
                meditation_minutes: 180,
            } as any,
        },
        create: {
            userId: testUser.id,
            totalSteps: 47,
            totalXP: 2847,
            currentStreak: 12,
            longestStreak: 25,
            currentZone: 'WILL',
            currentRank: 'WARRIOR',
            sphereProgress: {
                body: 0.8,
                will: 0.6,
                focus: 0.4,
                mind: 0.3,
                peace: 0.2,
                money: 0.1,
            } as any,
            totalStats: {
                habits_completed: 47,
                tasks_completed: 23,
                workouts_completed: 15,
                calories_burned: 2400,
                water_drunk: 36,
                meditation_minutes: 180,
            } as any,
        },
    });

    // 8. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚úÖ Creating test user habits...');
    const ensureHabitForUser = async (data: Parameters<typeof prisma.habit.create>[0]['data']) => {
        const exists = await prisma.habit.findFirst({ where: { userId: data.userId, name: data.name } });
        if (!exists) {
            await prisma.habit.create({ data });
        }
    };
    await Promise.all([
        ensureHabitForUser({
            userId: testUser.id,
            name: '–ü–∏—Ç—å –≤–æ–¥—É 2L',
            description: '–í—ã–ø–∏–≤–∞—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å',
            iconName: 'water_drop',
            colorHex: '#2196F3',
            categoryId: 'health',
            frequencyType: 'DAILY',
            reminderTime: '08:00',
            isActive: true,
            currentStreak: 12,
            maxStreak: 25,
            strength: 85,
        }),
        ensureHabitForUser({
            userId: testUser.id,
            name: '–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è',
            description: '10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ',
            iconName: 'self_improvement',
            colorHex: '#9C27B0',
            categoryId: 'mind',
            frequencyType: 'DAILY',
            reminderTime: '07:00',
            isActive: true,
            currentStreak: 15,
            maxStreak: 20,
            strength: 92,
        }),
    ]);

        console.log('‚úÖ Seed completed successfully!');
        console.log(`üìä Ensured records:
    - ${categories.length} habit categories
    - ${templatesCreated} habit templates (newly created)
    - ${measurementTypes.length} measurement types
    - 2 exercises (upsert)
    - ${quotesCreated} quotes (newly created)
    - 1 test user with habits and progress`);
}

main()
    .catch((e) => {
        console.error('‚ùå Seed failed:', e);
        process.exit(1);
    })
    .finally(() => {
        void prisma.$disconnect();
    });
